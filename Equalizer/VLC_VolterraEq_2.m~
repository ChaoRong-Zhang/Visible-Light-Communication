%%
%Volterra NLMS Equalyzer using PAM symbols, different evaluation of SNR and of
%the nonlinearity



clear;
clc;
close all;

addpath(['..' filesep '..' filesep 'Channel results']);
addpath(['..' filesep 'VLC Simulator' filesep]);
addpath(['..' filesep 'VLC Simulator' filesep 'LED Parameters']);

load whiteLED_334-15.mat;

% load channel01.mat;



% R = 0.56;
% R = 1;
% 
% 
% b0 = 1;
% b1 = 0.5;
% b2 = 0.05;

%-------------------------Adaptive Filtering Parameters--------------------
numberOfBits = 2;
N = 12;
maxRuns = 15000;
maxIt = 1000;
mu = 0.8;
gamma = 1e-12;
SNR = 30;


adapFiltLength = (N^2+N)/2 + N;

% adapFiltLength = N;


auxMatrix = triu(ones(N));
[l1,l2] = find(auxMatrix);

% adapFiltLength = N;


% auxMatrix = triu(ones(N));
% [l1,l2] = find(auxMatrix);

% delayVector = 5;

delayVector = 13;



noisePower = 100;
% barGamma = 4*sqrt(5*noisePower);

barGamma = 0;

barGammaVector = 1;

%-------------------------Adaptive Filtering Parameters--------------------




%-------------------------LED Parameters-----------------------------------
% maxLEDVoltage = 3.6; %500 mV
% minLEDVoltage = 3;
% maxLEDCurrent = 0.03; %500 mA
% minLEDCurrent = 0.004; %500 mA
% 
% maxElectricalPower = maxLEDVoltage*maxLEDCurrent;
% minElectricalPower = minLEDCurrent*minLEDVoltage;
% % TOV = 0.2; 
% % eletrical2OpticalGain = 1; %eletrical to optical gain imposed by the LED
% 
% ISat = ISat;
% VB = 2.6; %minimum voltage for current flow 
% nLED = n; %LED ideality factor
% VT = 0.025; %Thermal voltage
% 
% 
% halfAngleLED = deg2rad(15);
% luminousIntensityLED = 21375; %milicandela
% maxLuminousIntensityLED = 28500;%milicandela
% 
% % opticalPower = luminousIntensityLED*2*pi*(1-cos(halfAngleLED))/1000;
% 
% % ledLuminousEfficacy = opticalPower/(3.2*10e-3); %this electrical power is evaluated using current and voltage of the linear region of the I-V curve%
% maxCd = 28.5;
% minCd = 14.25;
% 
% 
% 
% 
% % ledLuminousEfficacy = opticalPower/(3.2*10e-3); %this electrical power is evaluated using current and voltage of the linear region of the I-V curve%
% ledLuminousEfficacy = (maxCd - minCd)/(maxElectricalPower - minElectricalPower) ; %this electrical power is evaluated using current and voltage of the linear region of the I-V curve%




Poptical = @(ledLuminousEfficacy,electricalPower,k) (ledLuminousEfficacy.*electricalPower)./((1 + (ledLuminousEfficacy.*electricalPower./(maxLuminousIntensityLED/1000)).^(2*k)).^(1/(2*k)));

%-------------------------LED Parameters-----------------------------------




%-------------------------Photodiode Parameters----------------------------

A = 1e-4; %photodiode area (cm)
d = 10e-2; %distance between LED and photodiode (cm)
R = 0.5;
FOV = deg2rad(25);

%-------------------------Photodiode Parameters----------------------------


%-------------------------Pre Amplifier Parameters-------------------------

transimpedanceGain = 1;

%-------------------------Pre Amplifier Parameters-------------------------


%-------------------------Transmission Parameters--------------------------

kNonLinearity = 2;

fs = 2e6;

theta = 0;
phi = 0;

H_0 = A/d^2 * (n+1)/(2*pi) * cos(phi)^n * cos(theta) * rectangularPulse(-1,1,theta/FOV);


VDC = 3.25;
maxAbsoluteValueModulation = 3;

maxModulationIndex = (maxLEDVoltage - VDC)/VDC;
modulationIndexVector = [0.05 0.075 0.1];


%-------------------------Transmission Parameters--------------------------


for index = 1:length(modulationIndexVector)
    modulationIndex = modulationIndexVector(index);
    
    if modulationIndex > maxModulationIndex
        warning('Modulation Index may cause undesired nonlinear effects')
    end

    maxVoltage = VDC*(1+modulationIndex);
    deltaV = maxVoltage - VDC;

   
    w2 = zeros(adapFiltLength,maxRuns,maxIt);
    for j = 1:maxIt
        j

        input = randi([0,2^numberOfBits-1],maxRuns*2,1);
        pilot = real(pammod(input,2^numberOfBits,0,'gray'));

        convLength = length(pilot) + LEDfreqRespPoints -1;
        NFFT = 2^nextpow2(convLength);

        pilotFreq = fft(pilot,NFFT);

        f = fs/2*linspace(0,1,NFFT/2 + 1)*2*pi;

        w = [-fliplr(f(2:end-1)) f];

        LEDResp = freqRespLED(w);

        filteredVinAux = real(ifft(pilotFreq.*fftshift(LEDResp))); 

        filteredVin = filteredVinAux(1:length(pilot));

        VoltageConstant = modulationIndex*maxVoltage/((1+modulationIndex)*max(filteredVin));

        filteredVin = filteredVin*VoltageConstant + VDC;
            
        iLEDOutput = I_V_Fun(filteredVin,VT,nLED,ISat);

        eletricalPowerOutput = filteredVin.*iLEDOutput;

        opticalPowerOutput = Poptical(ledLuminousEfficacy,eletricalPowerOutput,kNonLinearity);

        opticalPowerOutputConvolved = opticalPowerOutput*H_0;

        n = randn(length(opticalPowerOutputConvolved),1); %noise signal

        receivedCurrentSignal = opticalPowerOutputConvolved*R*A;
        receivedCurrentSignalAC = receivedCurrentSignal - mean(receivedCurrentSignal);
        receivedCurrentSignalPower = receivedCurrentSignalAC'*receivedCurrentSignalAC/length(receivedCurrentSignal);

        powerNoiseAux = n'*n/(length(n));
        powerNoise = (receivedCurrentSignalPower/db2pow(SNR));
        n = n.*sqrt(powerNoise/powerNoiseAux);

        receivedVoltageSignalAux = (receivedCurrentSignal + n);
        receivedVoltageSignalAux = receivedVoltageSignalAux - mean(receivedVoltageSignalAux);
        receivedVoltageSignal =  receivedVoltageSignalAux*sqrt(var(pilot)/var(receivedVoltageSignalAux));


        xAux = [zeros(N-1,1);receivedVoltageSignal];

        w = zeros(adapFiltLength,maxRuns);

        d = zeros(maxRuns + delayinSamples + 1,1);
        e = zeros(maxRuns + delayinSamples + 1,1);
        
        for k = delayinSamples + 1:maxRuns + delayinSamples + 1

            xAP = xAux(k:-1:k-N+1);

            xTDLAux = zeros((N*N+N)/2,1);



            for lIndex = 1:length(l1)
                xTDLAux(lIndex,1) = xAP(l1(lIndex),1)*(xAP(l2(lIndex),1));
            end


            xTDLConc = [xAP;xTDLAux];


            d(k) = (pilot(-delayVector(delay) + k + 1)); 


            e(k) = d(k) - w(:,k)'*xTDLConc;

            w(:,k+1) = w(:,k) + mu*xTDLConc*((xTDLConc'*xTDLConc+gamma*eye(1))\eye(1))*conj(e(k));  


        end
        w2(:,:,j) = conj(w(:,1:maxRuns));
        e2(:,j) = abs(e).^2;
    end

    w3 = mean(w2,3);
    wFinal(index,barGammaIndex,delay,:,L+1) = w3(:,end);

    e3(index,barGammaIndex,delay,:,L+1) = mean(e2,2);

end


save(['.' filesep 'resultsMSE_VLC' filesep 'results30.mat'],'wFinal','e3','meanCount');



rmpath(['..' filesep 'VLC Simulator' filesep]);
rmpath(['..' filesep '..' filesep 'Channel results']);
rmpath(['..' filesep 'VLC Simulator' filesep 'LED Parameters']);




